(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{jBN8:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return c}));var a=n("Fcif"),r=n("+I+c"),i=(n("mXGw"),n("/FXl")),s=n("TjRS"),o=(n("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"pages/Identity/Registry.md"}});var d={_frontmatter:o},l=s.a;function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(l,Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"identity-registry"},"Identity Registry"),Object(i.b)("p",null,"A registry allows for distinct user identifiers and human readable discovery of network members.\nThe DSNP Id Registry is a simple contract that allows switching handles, identity contracts, and chain migration\nwhile maintaining all graph connections, public and private."),Object(i.b)("h2",{id:"specification-status"},"Specification Status"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},"Version"),Object(i.b)("th",{parentName:"tr",align:null},"Status"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"0.2"),Object(i.b)("td",{parentName:"tr",align:null},"Tentative")))),Object(i.b)("h2",{id:"purpose"},"Purpose"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Describes how the Identity Registry resolves a DSNP Id to an identity contract address"),Object(i.b)("li",{parentName:"ol"},"Describes how the Identity Registry allows for handle resolution"),Object(i.b)("li",{parentName:"ol"},"Presents the interface for the Identity Registry"),Object(i.b)("li",{parentName:"ol"},"Describes rejected alternatives")),Object(i.b)("h2",{id:"assumptions"},"Assumptions"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Ids will need to be moved from Betanet to Mainnet"),Object(i.b)("li",{parentName:"ul"},"Handles are for display and discovery purposes only")),Object(i.b)("h2",{id:"discovery-via-dsnp-handles"},"Discovery via DSNP Handles"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Contract addresses or numerical ids are not easy to remember."),Object(i.b)("li",{parentName:"ul"},"Most networks rely on text based handles for discovery of users on a network."),Object(i.b)("li",{parentName:"ul"},"DSNP handles are an easy way to allow easy user lookup.")),Object(i.b)("h3",{id:"handles"},"Handles"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Handles are simple UTF-8 strings."),Object(i.b)("li",{parentName:"ul"},"No limitations are placed on length or contents, although different clients may not have support for the full unicode set."),Object(i.b)("li",{parentName:"ul"},"A user MAY NOT register multiple handles that point to the same DSNP Id."),Object(i.b)("li",{parentName:"ul"},"Handles must be unique.")),Object(i.b)("h3",{id:"homograph-attack-mitigation"},"Homograph Attack Mitigation"),Object(i.b)("p",null,"UTF-8 support for handles opens handle users up to ",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/IDN_homograph_attack"},"homograph attacks"),", not to mention case-sensitivity issues.\nThis issue is of ongoing discussion both for the DSNP as well as in for ICANN domain names and other projects working with internationalization support."),Object(i.b)("p",null,"Because the DSNP Id is stable, attacks would only be successful in cases where the DSNP Id were unknown.\n",Object(i.b)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Punycode"},"Punycode")," is used by some software to prevent homographs by encoding all non-Latin characters into Latin characters.\nSo punycode does not properly present non-Latin characters which isn't reaching the level of internationalization support desired by the DSNP."),Object(i.b)("h4",{id:"current-mitigation-strategies"},"Current Mitigation Strategies"),Object(i.b)("p",null,"Clients resolving handles MUST implement a method to detect potential homographs and check both user settings and potentially check the registry for additional potential matching DSNP Ids."),Object(i.b)("h2",{id:"dsnp-ids"},"DSNP Ids"),Object(i.b)("p",null,"Ethereum contract addresses are currently 160 bit values which is much larger than needed for unique identification.\nIdentification can be reduced to just 64 bit identifiers with the registry and enable contract changing."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Remember:")," Only DSNP Ids are safe for long term data connections."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DSNP Identity contract addresses are not guaranteed long term for upgrade and migration reasons"),Object(i.b)("li",{parentName:"ul"},"Handles can change")),Object(i.b)("h2",{id:"resolutions"},"Resolutions"),Object(i.b)("p",null,"Resolutions are possible between any of the three pieces of data: Handle, DSNP Id, and Contract Address.\nWhile a utility method is provided for ease of moving from handle to the contract address,\nthe other resolutions require using contract log events."),Object(i.b)("h3",{id:"current-handle---current-contract-address"},"Current Handle -> Current Contract Address"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"IRegistry.resolveHandleToAddress")," method is the most efficient for discovery of current values.\nTo retrieve historical values, perform a log search using the ",Object(i.b)("inlineCode",{parentName:"p"},"DSNPRegistryUpdate")," event."),Object(i.b)("h3",{id:"current-handle---current-dsnp-id"},"Current Handle -> Current DSNP Id"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"IRegistry.resolveHandleToId")," method is the most efficient for discovery of current values.\nTo retrieve historical values, perform a log search using the ",Object(i.b)("inlineCode",{parentName:"p"},"DSNPRegistryUpdate")," event."),Object(i.b)("h3",{id:"other-lookups--historical-values"},"Other Lookups & Historical Values"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"DSNPRegistryUpdate")," event is provided to resolve DSNP Ids, handles, and contract addresses.\nThe DSNP Id, handle, and contract address are indexed in the event so use a log search using the event and the search data as topics."),Object(i.b)("p",null,"A search by handle may produce more than one DSNP Id or contract address, meaning that a handle was previously attached to a different DSNP Id or contract address.\nThere is no guarantee that the searched handle will be currently attached to any of the DSNP Ids or contract addresses in the result."),Object(i.b)("p",null,"A search by contract address may produce more than one result meaning that the contract address is currently or previously attached to other DSNP Ids.\nTo test for the current value, the query would need to be run again with each of the resulting DSNP Ids retrieving the most recent ",Object(i.b)("inlineCode",{parentName:"p"},"DSNPRegistryUpdate")," event."),Object(i.b)("p",null,"A search by DSNP Id will retrieve the history of all handles and contract addresses that have been connected to that DSNP Id.\nThe most recent event (the one with the highest block number), will give the current handle and contract address for the given DSNP Id."),Object(i.b)("h2",{id:"eip-721"},"EIP 721"),Object(i.b)("p",null,"DSNP support for the NFT standard ",Object(i.b)("a",{parentName:"p",href:"https://eips.ethereum.org/EIPS/eip-721"},"EIP 721")," for handles is not available for ",Object(i.b)("a",{parentName:"p",href:"/Networks"},"Betanet"),".\nIt will be reconsidered for Mainnet."),Object(i.b)("h3",{id:"nft-concerns"},"NFT Concerns"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The EIP 721 standard has its own ownership and permission system that is too limited for use across the DSNP"),Object(i.b)("li",{parentName:"ul"},"Supporting two ownership systems adds unneeded complexity"),Object(i.b)("li",{parentName:"ul"},"Identity contract ownership would require additional complexity to receive and transfer 721 tokens")),Object(i.b)("h2",{id:"rejected-alternatives"},"Rejected Alternatives"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Why not the Ethereum Name Service (",Object(i.b)("a",{parentName:"li",href:"https://ens.domains/"},"ENS"),")?",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Overly complex and expensive for the simple use case of handles"),Object(i.b)("li",{parentName:"ul"},"Support can be added later through a custom ENS resolver"),Object(i.b)("li",{parentName:"ul"},"Didn't provide a numerical id for efficient graph storage"),Object(i.b)("li",{parentName:"ul"},"Still subject to homograph attacks")))),Object(i.b)("h2",{id:"contract-interface"},"Contract Interface"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-solidity"},"/**\n * @dev DSNP Registry Interface\n * @dev Suggested data storage implementation:\n *   uint64 internal currentIdSequenceMarker = 0x1; // Must not start at 0\n *   mapping(string => [id, address]) internal handleToIdAndAddress;\n */\ninterface IRegistry {\n\n    /**\n     * @dev Log when a resolution address is changed\n     * @param id The DSNP Id \n     * @param addr The address the DSNP Id is pointing at\n     * @param handle The actual UTF-8 string used for the handle \n     */\n    event DSNPRegistryUpdate(uint64 indexed id, address indexed addr, string indexed handle);\n\n    /**\n     * @dev Register a new DSNP Id\n     * @param addr Address for the new DSNP Id to point at\n     * @param handle The handle for discovery\n     * \n     * MUST reject if the handle is already in use\n     * MUST emit DSNPRegistryUpdate\n     * MUST check that addr implements IDelegation interface\n     */\n    function register(address addr, string handle) external returns (uint64);\n\n    /**\n     * @dev Alter a DSNP Id resolution address\n     * @param newAddr Original or new address to resolve to\n     * @param handle The handle to modify\n     * \n     * MUST be called by someone who is authorized on the contract\n     *      via `IDelegation(oldAddr).isAuthorizedTo(oldAddr, Permission.OWNERSHIP_TRANSFER, block.number)`\n     * MUST emit DSNPRegistryUpdate\n     * MUST check that newAddr implements IDelegation interface\n     */\n    function changeAddress(address newAddr, string handle) external;\n\n    /**\n     * @dev Alter a DSNP Id resolution address by EIP-712 Signature\n     * @param r ECDSA Signature r value\n     * @param s ECDSA Signature s value\n     * @param v EIP-155 calculated Signature v value\n     * @param newAddr New address for the DSNP Id to point at\n     * @param handle The handle to modify\n     * \n     * MUST be signed by someone who is authorized on the contract\n     *      via `IDelegation(oldAddr).isAuthorizedTo(ecrecovedAddr, Permission.OWNERSHIP_TRANSFER, block.number)`\n     * MUST check that newAddr implements IDelegation interface\n     * TODO: FIX THE ISSUE OF newAddr not being a part of the creation\n     * MUST emit DSNPRegistryUpdate\n     */\n    function changeAddressByEIP712Sig(bytes32 r, bytes32 s, uint32 v, address newAddr, string handle) external;\n\n    /**\n     * @dev Alter a DSNP Id handle\n     * @param oldHandle The previous handle for modification\n     * @param newHandle The new handle to use for discovery\n     * \n     * MUST NOT allow a registration of a handle that is already in use\n     * MUST be called by someone who is authorized on the contract\n     *      via `IDelegation(oldHandle -> addr).isAuthorizedTo(ecrecovedAddr, Permission.OWNERSHIP_TRANSFER, block.number)`\n     * MUST emit DSNPRegistryUpdate\n     */\n    function changeHandle(string oldHandle, string newHandle) external;\n\n    /**\n     * @dev Alter a DSNP Id handle by EIP-712 Signature\n     * @param r ECDSA Signature r value\n     * @param s ECDSA Signature s value\n     * @param v EIP-155 calculated Signature v value\n     * @param oldHandle The previous handle for modification\n     * @param newHandle The new handle to use for discovery\n     * \n     * MUST NOT allow a registration of a handle that is already in use\n     * MUST be signed by someone who is authorized on the contract\n     *      via `IDelegation(handle -> addr).isAuthorizedTo(ecrecovedAddr, Permission.OWNERSHIP_TRANSFER, block.number)`\n     * MUST emit DSNPRegistryUpdate\n     */\n    function changeHandleByEIP712Sig(bytes32 r, bytes32 s, uint32 v, string oldHandle, string newHandle) external;\n\n    /**\n     * @dev Resolve a handle to a contract address\n     * @param handle The handle to resolve\n     * \n     * @throws if not found\n     * @returns Address of the contract\n     */\n    function resolveHandleToAddress(string handle) view external returns (address);\n\n    /**\n     * @dev Resolve a handle to a DSNP Id\n     * @param handle The handle to resolve\n     * \n     * @throws if not found\n     * @returns DSNP Id\n     */\n    function resolveHandleToId(string handle) view external returns (uint64);\n}\n")))}void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"pages/Identity/Registry.md"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---pages-identity-registry-md-58a84ee2ca658307500d.js.map