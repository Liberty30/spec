{"version":3,"sources":["webpack:///../pages/Batches/Overview.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAQaA,G,UAAe,S,2MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,WADR,WAGA,6JACA,kBACE,GAAM,eADR,eAGA,mDAAkC,iBAAGC,WAAW,IAC5C,KAAQ,4CADsB,kBAAlC,KAGA,kBACE,GAAM,uBADR,uBAGA,4UAA2T,iBAAGA,WAAW,IACrU,KAAQ,sBAD+S,oBAA3T,oCAGA,kBACE,GAAM,mBADR,mBAGA,sOAGA,0DAAyC,0BAAYA,WAAW,KAAvB,SAAzC,eACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,8CAIL,+FACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,2HAIL,4FAA2E,0BAAYA,WAAW,KAAvB,MAA3E,KACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,2CAIL,8EACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,uIAIL,kBACE,GAAM,WADR,WAGA,yMAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,uBADZ,yQASL,kRAAiQ,iBAAGA,WAAW,IAC3Q,KAAQ,sBADqP,6BAAjQ,KAGA,kBACE,GAAM,cADR,cAGA,kBACE,GAAM,yBADR,yBAGA,qDAAoC,iBAAGA,WAAW,IAC9C,KAAQ,uCADwB,cAApC,0EAEkG,iBAAGA,WAAW,IAC5G,KAAQ,uCADsF,cAFlG,qDAI6E,iBAAGA,WAAW,IACvF,KAAQ,sBADiE,gBAJ7E,qBAM+C,iBAAGA,WAAW,IACzD,KAAQ,6CADmC,aAN/C,wBASA,kBACE,GAAM,mCADR,mCAGA,gEAA+C,iBAAGA,WAAW,IACzD,KAAQ,gDADmC,qBAA/C,2OAE0Q,0BAAYA,WAAW,KAAvB,UAF1Q,KAEkU,0BAAYA,WAAW,KAAvB,eAFlU,KAE+X,0BAAYA,WAAW,KAAvB,OAF/X,0KAEylB,iBAAGA,WAAW,IACnmB,KAAQ,gDAD6kB,qBAFzlB,yH,yMASJJ,EAAWK,gBAAiB","file":"component---pages-batches-overview-md-fc32c8cdd6a82c2c386c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/spec/spec/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"batches\"\n    }}>{`Batches`}</h1>\n    <p>{`The Batches specifications describe how Batches are announced, stored and queried. A batch file is made of one type of DSNP message.`}</p>\n    <h2 {...{\n      \"id\": \"file-format\"\n    }}>{`File Format`}</h2>\n    <p>{`The storage file format is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/parquet-format\"\n      }}>{`Apache Parquet`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"batch-announcements\"\n    }}>{`Batch Announcements`}</h2>\n    <p>{`DSNP Messages are queued where they go directly into one or more DSNP Message Type queues. At some point when a queue is filled, the messages are dequeued and written to a Batch files and stored. The details of each created batch are sent to IAnnounce. IAnnounce emits one message per Batch file. Please see `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Announce\"\n      }}>{`Announce Message`}</a>{` documentation for more details.`}</p>\n    <h2 {...{\n      \"id\": \"batch-file-urls\"\n    }}>{`Batch file URLs`}</h2>\n    <p>{`The Batch file URL accepts different schemes to assist with knowing how to retrieve\nand query the file contents.  This allows adapters to be written to support different\nmethods of storage and retrieval.`}</p>\n    <p>{`For HTTPS downloads, the SDK uses `}<inlineCode parentName=\"p\">{`https`}</inlineCode>{` as needed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`    queue.commit({scheme: 'https'})    \n`}</code></pre>\n    <p>{`so that the URI emitted in the announcement would look something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`   dsnpUri: \"https://some.cloudhosting.com/cf9c0d7f801f56b634ae4cd3cf0b1aab9e11f2e00125dfb156baccc760417c41.parquet\"\n`}</code></pre>\n    <p>{`If it were for retrieval directly from Amazon S3, the SDK could use `}<inlineCode parentName=\"p\">{`s3`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`    queue.commit({scheme: 's3'})    \n`}</code></pre>\n    <p>{`Resulting in s3 instead of https in the announcement:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`    dsnpUri: \"s3://s3.us-west-2.amazonaws.com/mybucket/cf9c0d7f801f56b634ae4cd3cf0b1aab9e11f2e00125dfb156baccc760417c41.parquet\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"queries\"\n    }}>{`Queries`}</h2>\n    <p>{`Querying a batch file is done via Bloom filters.  The query call is done through the SDK and\nconsists of a URL and an object of DSNP message column name/value pairs.  Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`    includes:boolean = sdk.batchIncludes(\n        \"https://mycloudhost.com/cf9c0d7f801f56b634ae4cd3cf0b1aab9e11f2e00125dfb156baccc760417c41\",\n        { fromAddress: \"45cdf29f9d10e57a5c1d993745acd65315cabs2a3aa2b1b\",\n          dsnpType: 2\n        }\n    )\n`}</code></pre>\n    <p>{`Not all fields of a DSNP data type are added to the Bloom filters.  Generally speaking, content hashes and URIs are omitted, whereas any field containing a socialAddress or other meaningful text is included in the Bloom filter.  For more detail, see `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Overview\"\n      }}>{`See the Messages Overview`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h2>\n    <h3 {...{\n      \"id\": \"batch-file-validation\"\n    }}>{`Batch File Validation`}</h3>\n    <p>{`Batch files are hashed using `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/SHA-3\"\n      }}>{`keccak-256`}</a>{` so that it can later be used to verify the integrity of the file. The `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/SHA-3\"\n      }}>{`keccak-256`}</a>{` hash of the file is submitted as part of a batch `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Announce\"\n      }}>{`announcement`}</a>{` that result in a `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Announce#announcing-dsnp-events\"\n      }}>{`DSNPBatch`}</a>{` Ethereum log event.`}</p>\n    <h3 {...{\n      \"id\": \"batch-file-dsnp-type-validation\"\n    }}>{`Batch File DSNP Type Validation`}</h3>\n    <p>{`Each batch file consists of one type of `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Overview#dsnp-announcement-formats\"\n      }}>{`DSNP announcement`}</a>{`. Therefore, the file columns should correspond to the format listed in the DSNP announcement dsnpData field. For example, if the file claims to be of DSNP type Broadcast, then the file is expected to include the following columns: `}<inlineCode parentName=\"p\">{`fromId`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`contentHash`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`uri`}</inlineCode>{`.  As long as the batch file hash can be verified, order of dsnpData fields are irrelevant. Also note , if the announcement format does not match the format listed in `}<a parentName=\"p\" {...{\n        \"href\": \"/Messages/Overview#dsnp-announcement-formats\"\n      }}>{`DSNP announcement`}</a>{`, reading a file is not possible. Hence, being able to successfully read the file means that the file is valid.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}